service: commons-api

package:
  excludeDevDependencies: false
  individually: true

plugins:
  - serverless-appsync-plugin
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

provider:
  name: aws
  profile: commons-app
  runtime: nodejs14.x
  vpc:
    securityGroupIds:
      - sg-032d9aa86d926a1d1
    subnetIds:
      - subnet-02f47c3bb960dc6e3
      - subnet-0ce52114d1cfc7b8d
  region: ca-central-1
  memorySize: 512
  timeout: 15
  environment:
    NODE_ENV: ${self:custom.stage}
  deploymentBucket:
    name: commons-app-deployment-${self:custom.stage}
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DeleteNetworkInterface"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "ssm:GetParameter"
            - "ssm:GetParameters"
            - "ssm:GetParametersByPath"
            - "ssm:DescribeParameters"
            - "ssm:PutParameter"
          Resource:
            - "Fn::Join":
                - ":"
                - - "arn:aws:ssm"
                  - Ref: "AWS::Region"
                  - Ref: "AWS::AccountId"
                  - "*"
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource:
            - "Fn::Join":
                - ":"
                - - "arn:aws:lambda"
                  - Ref: "AWS::Region"
                  - Ref: "AWS::AccountId"
                  - function:commons-client-lambda-${self:custom.stage}

custom:
  stage: ${opt:stage, self:provider.stage}
  appSync:
    - name: commons-client-api-${self:custom.stage}
      authenticationType: API_KEY
      schema: graphql/schema.graphql

      apiKeys:
        - name: commons-client-api-key-${self:custom.stage}
          description: "Client API key"
          expiresAfter: 365d

      mappingTemplatesLocation: graphql/client/mapping-templates
      mappingTemplates:
        - ${file(graphql/client/resources/queries.yml)}
        - ${file(graphql/client/resources/mutations.yml)}

      dataSources:
        - ${file(graphql/client/resources/data-sources.yml)}
    - name: commons-admin-api-${self:custom.stage}
      authenticationType: API_KEY
      schema: graphql/schema.graphql

      apiKeys:
        - name: commons-admin-api-key-${self:custom.stage}
          description: "Admin API key"
          expiresAfter: 365d

      mappingTemplatesLocation: graphql/admin/mapping-templates
      mappingTemplates:
        - ${file(graphql/admin/resources/queries.yml)}
        - ${file(graphql/admin/resources/mutations.yml)}

      dataSources:
        - ${file(graphql/admin/resources/data-sources.yml)}

resources:
  Resources:
    IamRoleLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - appsync.amazonaws.com
                AWS:
                  - arn:aws:iam::022508254368:root
              Action: sts:AssumeRole

functions:
  client-lambda:
    handler: dist/lambdas/client.handler
    name: commons-client-lambda-${self:custom.stage}
    description: Provides data to the client apps

  admin-lambda:
    handler: dist/lambdas/admin.handler
    name: commons-admin-lambda-${self:custom.stage}
    description: Provides data to the admin app

  schedule-jobs:
    handler: dist/lambdas/schedule-jobs.handler
    name: commons-scheduled-jobs-${self:custom.stage}
    description: Performs scheduled CRON jobs
    events:
      - schedule:
          name: fetch-bills-cron-job-${self:custom.stage}
          description: Fetches events from LEGISinfo server and creates Bills and Events in the database. Runs every 24 hours at 8AM Ottawa time (12PM UTC)
          rate: cron(0 12 * * ? *)
          input:
            eventSource: aws:cloudWatchEvent
            header:
              eventType:
                entityType: Bills
                type: UpdateBills
              environment: ${self:custom.stage}
